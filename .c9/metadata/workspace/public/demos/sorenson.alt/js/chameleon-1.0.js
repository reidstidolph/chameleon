{"changed":true,"filter":false,"title":"chameleon-1.0.js","tooltip":"/public/demos/sorenson.alt/js/chameleon-1.0.js","value":"/**\n * \n * v0.2\n * \n * /\n\n\n/**==========================================\n *  Vars\n   ========================================== */\n   \n/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\nvar CryptoJS=CryptoJS||function(s,p){var m={},l=m.lib={},n=function(){},r=l.Base={extend:function(b){n.prototype=this;var h=new n;b&&h.mixIn(b);h.hasOwnProperty(\"init\")||(h.init=function(){h.$super.init.apply(this,arguments)});h.init.prototype=h;h.$super=this;return h},create:function(){var b=this.extend();b.init.apply(b,arguments);return b},init:function(){},mixIn:function(b){for(var h in b)b.hasOwnProperty(h)&&(this[h]=b[h]);b.hasOwnProperty(\"toString\")&&(this.toString=b.toString)},clone:function(){return this.init.prototype.extend(this)}},\nq=l.WordArray=r.extend({init:function(b,h){b=this.words=b||[];this.sigBytes=h!=p?h:4*b.length},toString:function(b){return(b||t).stringify(this)},concat:function(b){var h=this.words,a=b.words,j=this.sigBytes;b=b.sigBytes;this.clamp();if(j%4)for(var g=0;g<b;g++)h[j+g>>>2]|=(a[g>>>2]>>>24-8*(g%4)&255)<<24-8*((j+g)%4);else if(65535<a.length)for(g=0;g<b;g+=4)h[j+g>>>2]=a[g>>>2];else h.push.apply(h,a);this.sigBytes+=b;return this},clamp:function(){var b=this.words,h=this.sigBytes;b[h>>>2]&=4294967295<<\n32-8*(h%4);b.length=s.ceil(h/4)},clone:function(){var b=r.clone.call(this);b.words=this.words.slice(0);return b},random:function(b){for(var h=[],a=0;a<b;a+=4)h.push(4294967296*s.random()|0);return new q.init(h,b)}}),v=m.enc={},t=v.Hex={stringify:function(b){var a=b.words;b=b.sigBytes;for(var g=[],j=0;j<b;j++){var k=a[j>>>2]>>>24-8*(j%4)&255;g.push((k>>>4).toString(16));g.push((k&15).toString(16))}return g.join(\"\")},parse:function(b){for(var a=b.length,g=[],j=0;j<a;j+=2)g[j>>>3]|=parseInt(b.substr(j,\n2),16)<<24-4*(j%8);return new q.init(g,a/2)}},a=v.Latin1={stringify:function(b){var a=b.words;b=b.sigBytes;for(var g=[],j=0;j<b;j++)g.push(String.fromCharCode(a[j>>>2]>>>24-8*(j%4)&255));return g.join(\"\")},parse:function(b){for(var a=b.length,g=[],j=0;j<a;j++)g[j>>>2]|=(b.charCodeAt(j)&255)<<24-8*(j%4);return new q.init(g,a)}},u=v.Utf8={stringify:function(b){try{return decodeURIComponent(escape(a.stringify(b)))}catch(g){throw Error(\"Malformed UTF-8 data\");}},parse:function(b){return a.parse(unescape(encodeURIComponent(b)))}},\ng=l.BufferedBlockAlgorithm=r.extend({reset:function(){this._data=new q.init;this._nDataBytes=0},_append:function(b){\"string\"==typeof b&&(b=u.parse(b));this._data.concat(b);this._nDataBytes+=b.sigBytes},_process:function(b){var a=this._data,g=a.words,j=a.sigBytes,k=this.blockSize,m=j/(4*k),m=b?s.ceil(m):s.max((m|0)-this._minBufferSize,0);b=m*k;j=s.min(4*b,j);if(b){for(var l=0;l<b;l+=k)this._doProcessBlock(g,l);l=g.splice(0,b);a.sigBytes-=j}return new q.init(l,j)},clone:function(){var b=r.clone.call(this);\nb._data=this._data.clone();return b},_minBufferSize:0});l.Hasher=g.extend({cfg:r.extend(),init:function(b){this.cfg=this.cfg.extend(b);this.reset()},reset:function(){g.reset.call(this);this._doReset()},update:function(b){this._append(b);this._process();return this},finalize:function(b){b&&this._append(b);return this._doFinalize()},blockSize:16,_createHelper:function(b){return function(a,g){return(new b.init(g)).finalize(a)}},_createHmacHelper:function(b){return function(a,g){return(new k.HMAC.init(b,\ng)).finalize(a)}}});var k=m.algo={};return m}(Math);\n(function(s){function p(a,k,b,h,l,j,m){a=a+(k&b|~k&h)+l+m;return(a<<j|a>>>32-j)+k}function m(a,k,b,h,l,j,m){a=a+(k&h|b&~h)+l+m;return(a<<j|a>>>32-j)+k}function l(a,k,b,h,l,j,m){a=a+(k^b^h)+l+m;return(a<<j|a>>>32-j)+k}function n(a,k,b,h,l,j,m){a=a+(b^(k|~h))+l+m;return(a<<j|a>>>32-j)+k}for(var r=CryptoJS,q=r.lib,v=q.WordArray,t=q.Hasher,q=r.algo,a=[],u=0;64>u;u++)a[u]=4294967296*s.abs(s.sin(u+1))|0;q=q.MD5=t.extend({_doReset:function(){this._hash=new v.init([1732584193,4023233417,2562383102,271733878])},\n_doProcessBlock:function(g,k){for(var b=0;16>b;b++){var h=k+b,w=g[h];g[h]=(w<<8|w>>>24)&16711935|(w<<24|w>>>8)&4278255360}var b=this._hash.words,h=g[k+0],w=g[k+1],j=g[k+2],q=g[k+3],r=g[k+4],s=g[k+5],t=g[k+6],u=g[k+7],v=g[k+8],x=g[k+9],y=g[k+10],z=g[k+11],A=g[k+12],B=g[k+13],C=g[k+14],D=g[k+15],c=b[0],d=b[1],e=b[2],f=b[3],c=p(c,d,e,f,h,7,a[0]),f=p(f,c,d,e,w,12,a[1]),e=p(e,f,c,d,j,17,a[2]),d=p(d,e,f,c,q,22,a[3]),c=p(c,d,e,f,r,7,a[4]),f=p(f,c,d,e,s,12,a[5]),e=p(e,f,c,d,t,17,a[6]),d=p(d,e,f,c,u,22,a[7]),\nc=p(c,d,e,f,v,7,a[8]),f=p(f,c,d,e,x,12,a[9]),e=p(e,f,c,d,y,17,a[10]),d=p(d,e,f,c,z,22,a[11]),c=p(c,d,e,f,A,7,a[12]),f=p(f,c,d,e,B,12,a[13]),e=p(e,f,c,d,C,17,a[14]),d=p(d,e,f,c,D,22,a[15]),c=m(c,d,e,f,w,5,a[16]),f=m(f,c,d,e,t,9,a[17]),e=m(e,f,c,d,z,14,a[18]),d=m(d,e,f,c,h,20,a[19]),c=m(c,d,e,f,s,5,a[20]),f=m(f,c,d,e,y,9,a[21]),e=m(e,f,c,d,D,14,a[22]),d=m(d,e,f,c,r,20,a[23]),c=m(c,d,e,f,x,5,a[24]),f=m(f,c,d,e,C,9,a[25]),e=m(e,f,c,d,q,14,a[26]),d=m(d,e,f,c,v,20,a[27]),c=m(c,d,e,f,B,5,a[28]),f=m(f,c,\nd,e,j,9,a[29]),e=m(e,f,c,d,u,14,a[30]),d=m(d,e,f,c,A,20,a[31]),c=l(c,d,e,f,s,4,a[32]),f=l(f,c,d,e,v,11,a[33]),e=l(e,f,c,d,z,16,a[34]),d=l(d,e,f,c,C,23,a[35]),c=l(c,d,e,f,w,4,a[36]),f=l(f,c,d,e,r,11,a[37]),e=l(e,f,c,d,u,16,a[38]),d=l(d,e,f,c,y,23,a[39]),c=l(c,d,e,f,B,4,a[40]),f=l(f,c,d,e,h,11,a[41]),e=l(e,f,c,d,q,16,a[42]),d=l(d,e,f,c,t,23,a[43]),c=l(c,d,e,f,x,4,a[44]),f=l(f,c,d,e,A,11,a[45]),e=l(e,f,c,d,D,16,a[46]),d=l(d,e,f,c,j,23,a[47]),c=n(c,d,e,f,h,6,a[48]),f=n(f,c,d,e,u,10,a[49]),e=n(e,f,c,d,\nC,15,a[50]),d=n(d,e,f,c,s,21,a[51]),c=n(c,d,e,f,A,6,a[52]),f=n(f,c,d,e,q,10,a[53]),e=n(e,f,c,d,y,15,a[54]),d=n(d,e,f,c,w,21,a[55]),c=n(c,d,e,f,v,6,a[56]),f=n(f,c,d,e,D,10,a[57]),e=n(e,f,c,d,t,15,a[58]),d=n(d,e,f,c,B,21,a[59]),c=n(c,d,e,f,r,6,a[60]),f=n(f,c,d,e,z,10,a[61]),e=n(e,f,c,d,j,15,a[62]),d=n(d,e,f,c,x,21,a[63]);b[0]=b[0]+c|0;b[1]=b[1]+d|0;b[2]=b[2]+e|0;b[3]=b[3]+f|0},_doFinalize:function(){var a=this._data,k=a.words,b=8*this._nDataBytes,h=8*a.sigBytes;k[h>>>5]|=128<<24-h%32;var l=s.floor(b/\n4294967296);k[(h+64>>>9<<4)+15]=(l<<8|l>>>24)&16711935|(l<<24|l>>>8)&4278255360;k[(h+64>>>9<<4)+14]=(b<<8|b>>>24)&16711935|(b<<24|b>>>8)&4278255360;a.sigBytes=4*(k.length+1);this._process();a=this._hash;k=a.words;for(b=0;4>b;b++)h=k[b],k[b]=(h<<8|h>>>24)&16711935|(h<<24|h>>>8)&4278255360;return a},clone:function(){var a=t.clone.call(this);a._hash=this._hash.clone();return a}});r.MD5=t._createHelper(q);r.HmacMD5=t._createHmacHelper(q)})(Math);\n\n\nwsc.setLogger(console);\nwsc.setLogLevel(wsc.LOGLEVEL.DEBUG);\n\n/**==========================================\n *  chameleon Object literal initialization\n   ========================================== */\n\nvar chameleon = {\n    configuration : null,\n    signallingStateId : 0,\n    signallingState: \"None\",\n    signallingError : null,\n    wscSessionObj : {},\n    handlers : {},\n    calls : {\n        active : [],\n        incoming : [],\n        outgoing: [],\n        all : []\n    },\n    callbacks : {}\n};\n\n// set up a basic logger\nchameleon.log = function(logMessage) {\n    var now = new Date(),\n        timestamp = now.getFullYear() + \"-\" + now.getMonth() + \"-\" + now.getDate() + \" \" + now.getHours() + \":\" + now.getMinutes() + \":\" + now.getSeconds();\n    if (typeof(logMessage) == 'string') console.log(\"%c\" + timestamp + \" [chameleon log] \" + logMessage, 'background: #222; color: #82FA58' );\n    else if (typeof(logMessage) == 'object') console.log(\"%c\" + timestamp + \" [chameleon log] \", 'background: #222; color: #82FA58', logMessage);\n};\n\n\n\n/**==========================================\n *  \n * \n * \n * \n * \n * chameleon Object Properties\n *  and Property Getters\n * \n * \n * \n * \n * \n   ========================================== */\n\n// set up an accessor to play ringtones\nObject.defineProperty(chameleon, 'isIncomingCall', {\n    get : function() {\n        return this._currentIncoming;\n    },\n    set : function(state) {\n        if(this.configuration.ringtoneId && state === true) {\n            chameleon.log(\"starting ringtone plaback of \" + this.configuration.ringtoneId + \" because state is \" + state);\n            chameleon.log(\"setting isIncomingCall to true\");\n            document.getElementById(this.configuration.ringtoneId).play();\n        }\n        if(this.configuration.ringtoneId && state === false) {\n            chameleon.log(\"stopping ringtone plaback of \" + this.configuration.ringtoneId);\n            chameleon.log(\"setting isIncomingCall to false\");\n            document.getElementById(this.configuration.ringtoneId).pause();\n            document.getElementById(this.configuration.ringtoneId).currentTime = 0;\n        }\n        this._currentIncoming = state;\n    },\n    _currentIncoming : false\n});\n\n// set up an accessor to play ringtones\nObject.defineProperty(chameleon, 'isOutgoingCall', {\n    get : function() {\n        return this._currentOutgoing;\n    },\n    set : function(state) {\n        if(this.configuration.ringbackId !== null && state === true) {\n            chameleon.log(\"starting ringback plaback of \" + this.configuration.ringbackId);\n            chameleon.log(\"setting isOutgoingCall to true\");\n            document.getElementById(this.configuration.ringbackId).play();\n        }\n        if(this.configuration.ringbackId !== null && state === false) {\n            chameleon.log(\"setting isOutgoingCall to false\");\n            chameleon.log(\"stopping ringback playback of \" + this.configuration.ringbackId);\n            document.getElementById(this.configuration.ringbackId).pause();\n            document.getElementById(this.configuration.ringbackId).currentTime = 0;\n        }\n        this._currentOutgoing = state;\n    },\n    _currentOutgoing : false\n});\n\n// set up an accessor for signalling state\nObject.defineProperty(chameleon, 'signallingState', {\n    get : function () {\n        if (!chameleon.wscSessionObj.sessionState || chameleon.wscSessionObj.sessionState === null) {\n            if (chameleon.signallingStateId === 0) return \"Not Activated\";\n            else return \"Deactivated\";\n        }\n        if (chameleon.wscSessionObj.sessionState == \"NONE\" && chameleon.signallingStateId === 3) return \"Connecting...\";\n        return chameleon.wscSessionObj.sessionState;\n    }\n});\n\n// shortcut to see if there is an active call\nObject.defineProperty(chameleon, 'isActiveCall', {\n    get: function() {\n        if (chameleon.calls.active.length > 0 ) return true;\n        else return false;\n    }\n});\n\n// shortcut the newest, most recent active call state\nObject.defineProperty(chameleon, 'activeCallState', {\n    get: function() {\n        if (chameleon.calls.active.length > 0) return chameleon.calls.active[chameleon.calls.active.length - 1].callState.state;\n        else return \"none\";\n    }\n});\n\n// shortcut the newest, most recent active call media path state\nObject.defineProperty(chameleon, 'activeCallMediaPath', {\n    get: function() {\n        if (chameleon.calls.active.length > 0) return chameleon.calls.active[chameleon.calls.active.length - 1].mediaPath;\n        else return \"none\";\n    }\n});\n\n// shortcut the newest, most recent active call direction\nObject.defineProperty(chameleon, 'activeCallDirection', {\n    get: function() {\n        if (chameleon.calls.active.length > 0) return chameleon.calls.active[chameleon.calls.active.length - 1].direction;\n        else return \"none\";\n    }\n});\n\n// shortcut the newest, most recent active callee\nObject.defineProperty(chameleon, 'activeCallee', {\n    get: function() {\n        if (chameleon.calls.active.length > 0) return chameleon.calls.active[chameleon.calls.active.length - 1].callee;\n        else return \"none\";\n    }\n});\n\n// shortcut the newest, most recent active callee\nObject.defineProperty(chameleon, 'activeCaller', {\n    get: function() {\n        if (chameleon.calls.active.length > 0) return chameleon.calls.active[chameleon.calls.active.length - 1].caller;\n        else return \"none\";\n    }\n});\n\n// shortcut the newest, most recent incoming caller\nObject.defineProperty(chameleon, 'incomingCaller', {\n    get: function() {\n        if (chameleon.calls.incoming.length > 0) return chameleon.calls.incoming[chameleon.calls.incoming.length - 1].caller;\n        else return \"none\";\n    }\n});\n\n\n// shortcut the newest, most recent incoming callee\nObject.defineProperty(chameleon, 'incomingCallee', {\n    get: function() {\n        if (chameleon.calls.incoming.length > 0) return chameleon.calls.incoming[chameleon.calls.incoming.length - 1].callee;\n        else return \"none\";\n    }\n});\n\n// shortcut the newest, most recent outgoing caller\nObject.defineProperty(chameleon, 'outgoingCaller', {\n    get: function() {\n        if (chameleon.calls.outgoing.length > 0) return chameleon.calls.outgoing[chameleon.calls.outgoing.length - 1].caller;\n        else return \"none\";\n    }\n});\n\n\n// shortcut the newest, most recent outgoing callee\nObject.defineProperty(chameleon, 'outgoingCallee', {\n    get: function() {\n        if (chameleon.calls.outgoing.length > 0) return chameleon.calls.outgoing[chameleon.calls.outgoing.length - 1].callee;\n        else return \"none\";\n    }\n});\n\n// shortcut for the Active call video state\nObject.defineProperty(chameleon, 'activeCallVideo', {\n    get: function() {\n        if (chameleon.calls.active.length > 0) return chameleon.calls.active[chameleon.calls.active.length - 1].getCallConfig().videoConfig;\n        else return \"none\";\n    }\n});\n\n// shortcut for the Active call video state\nObject.defineProperty(chameleon, 'activeCallAudio', {\n    get: function() {\n        if (chameleon.calls.active.length > 0) return chameleon.calls.active[chameleon.calls.active.length - 1].getCallConfig().audioConfig;\n        else return \"none\";\n    }\n});\n\n// shortcut for the Active call data state\nObject.defineProperty(chameleon, 'activeCallDC', {\n    get: function() {\n        if (chameleon.calls.active.length > 0 && chameleon.calls.active[chameleon.calls.active.length - 1].dataChannels.length > 0) {\n            \n            var state = chameleon.calls.active[chameleon.calls.active.length - 1].dataChannels[0].getState();\n            if (state == \"open\") return \"OPEN\"\n            else if (state == \"closed\") return \"CLOSED\"\n            else if (state == \"none\") return \"NONE\"\n            else if (state == \"connecting\") return \"CONNECTING\"\n            else return state;\n        }\n        else return \"none\";\n    }\n});\n\n\n/**==========================================\n *  \n * \n * \n * \n * \n *        chameleon Object Methods\n * \n * \n * \n * \n * \n   ========================================== */\n   \n/**==================Initialize================ \n\n\nThis takes in a configuration object, and starts \na session with a WSC. It will attempt to register\na SIP user, and set up event handlers for calls,\nsession state changes, etc. \n\n   ========================================== */\n\nchameleon.bootstrap = function(configuration, $scope) {\n    \n    var self = this;\n    chameleon.log(self);\n    if (!configuration) {\n        chameleon.log(\"Error...need to pass a configuration object.\");\n        return;\n    }\n    \n// do some checking to see that we have good configuration\n    if (typeof(configuration.sipUser) == 'undefined' || typeof(configuration.wscUri) == 'undefined' ) {\n        chameleon.log(\"Init Error: Improper configuration obj provided. \" + configuration);\n        return;\n    }\n    \n    chameleon.configuration = configuration;\n    chameleon.$scope = $scope;\n// Add a method to the scope to safely apply model updates\n    $scope.safeApply = function(fn) {\n        var phase = this.$root.$$phase;\n        if(phase == '$apply' || phase == '$digest') {\n            if(fn && (typeof(fn) === 'function')) {\n            fn();\n        }\n        } else {\n            this.$apply(fn);\n        }\n    };\n    \n    chameleon.updateAngular = function() { $scope.safeApply() };\n    \n    if (configuration.callbacks && configuration.callbacks.onIncomingData){\n        chameleon.callbacks.onIncomingData = configuration.callbacks.onIncomingData;\n    }\n    \n    self.signallingStateId = 3;\n    chameleon.log(\"Configuration loaded\");\n\n// config is good...lets start the WSC session\n    startWscSession(configuration);\n    \n// initialize the state variables\n    self.isIncomingCall = false;\n    self.isOutgoingCall = false;\n    self.isActiveCall = false;\n\n// function to start the WSC session\n    function startWscSession(configuration){\n        chameleon.log(\"starting session with WSC\");\n// create the session object\n        chameleon.wscSessionObj = new wsc.Session(configuration.sipUser, configuration.wscUri, onSuccess, onFailure);\n\n        chameleon.log(chameleon.wscSessionObj.sessionState);\n// make the WSC session state available in our chameleon variable\n       // chameleon.signallingState = chameleon.wscSessionObj.sessionState;\n        \n        var authHandler = new wsc.AuthHandler(chameleon.wscSessionObj);\n        \n//set up the auth handler\n        authHandler.refresh =  function(authType, authHeaders) {\n            authHeaders = chameleon.handlers.challengeHandler(authType, authHeaders);\n            return authHeaders;\n        };\n        \n        function onSuccess() {\n            \n            chameleon.log(\"WSC web session successfully started.\");\n            chameleon.log(chameleon.wscSessionObj);\n            chameleon.log(chameleon);\n// Set handler for state changes\n            chameleon.wscSessionObj.onSessionStateChange = function(newState){\n                chameleon.handlers.sessionStateChange(newState);\n            };\n\n// Create a CallPackage and an AuthHandler\n            chameleon.log(\"creating call package\");\n            chameleon.wscCallPackage = new wsc.CallPackage(chameleon.wscSessionObj);\n            chameleon.log(\"setting ICE mode in call package\");\n            chameleon.wscCallPackage.setTrickleIceMode(\"full\");\n            \n// Set up the Incoming call handler\n            chameleon.wscCallPackage.onIncomingCall = function(callObj, callConfig){\n                \n                chameleon.handlers.setupCallEvents(callObj);\n                \n                chameleon.log(\"Incoming call...calling handler\");\n                \n                chameleon.handlers.incomingCall(callObj, callConfig);\n            };\n            \n            chameleon.signallingStateId = 4;\n            chameleon.updateAngular();\n            \n            chameleon.log(\"sessionSuccessCallback provided is:  \" + typeof chameleon.configuration.callbacks.sessionSuccessCallback);\n            if (typeof chameleon.configuration.callbacks.sessionSuccessCallback === \"function\") {\n                chameleon.log(\"got a success callback...executing it.\");\n                chameleon.configuration.callbacks.sessionSuccessCallback();\n            }\n            \n        }\n        \n        function onFailure(err) {\n            chameleon.log(\"WSC web session failed to start.\");\n            chameleon.log(err.reason);\n            chameleon.signallingError = err;\n            self.signallingStateId = 1;\n            chameleon.updateAngular();\n        }\n    }\n};\n\n/**==========================================\n *  Shuts down the connection to a WSC\n   ========================================== */\n\nchameleon.closeSession = function(){\n    if (!this.wscSessionObj || this.wscSessionObj == {}) {\n        chameleon.log(\"session object not set\");\n        chameleon.log(this.wscSessionObj);\n        return;\n    }\n    if (this.signallingStateId < 3) return chameleon.log(\"session already closed\");\n    \n    else {\n        this.wscSessionObj.close();\n    \n    // clear the call arrays\n        chameleon.calls.active = [];\n        chameleon.calls.incoming = [];\n        chameleon.calls.outgoing = [];\n        \n    // initialize the state variables\n        chameleon.isIncomingCall = false;\n        chameleon.isOutgoingCall = false;\n        chameleon.isActiveCall = false;\n        \n    }\n    this.signallingStateId = 2;\n};\n\n/**==========================================\n *  Shuts down connection to WSC and resets\n *  object state.\n   ========================================== */\n\nchameleon.initialize = function(){\n    this.wscSessionObj.close();\n    chameleon.log(\"Initializing...\");\n    \n    this.signallingStateId = 0;\n    this.configuration = null;\n    this.signallingState = \"None\";\n    this.signallingError = null;\n    this.wscSessionObj = {};\n    \n};\n\n/**==========================================\n *  When chameleon has an incoming call, this\n *  answers the call.\n   ========================================== */\n\nchameleon.acceptIncomingCall = function(callObj){\n\n    chameleon.log(\"accepting a call.\");\n    \n    if (callObj) {\n        chameleon.log(\"acceptAttemptedCall called with a callObject: \" + callObj);\n    } else {\n        chameleon.log(\"acceptAttemptedCall called without a callObject...using most recent\");\n        callObj = chameleon.calls.incoming[0];\n        \n    }\n    chameleon.calls.active.push(callObj);\n    \n    if (callObj.direction == \"Incoming\") chameleon.calls.incoming.splice(chameleon.calls.incoming.indexOf(callObj), 1);\n    if (callObj.direction == \"Outgoing\") chameleon.calls.outgoing.splice(chameleon.calls.outgoing.indexOf(callObj), 1);\n    \n    callObj.accept(callObj.callConfig);\n    \n    return;\n};\n\n/**==========================================\n *  When chameleon has an incoming call, this\n *  rejects the call.\n   ========================================== */\n\nchameleon.rejectIncomingCall = function(callObj){\n    \n    chameleon.log(\"rejecting an incoming call.\");\n    \n    if (callObj) {\n        chameleon.log(\"rejectIncomingCall called with a callObject: \" + callObj);\n    } else {\n        chameleon.log(\"rejectIncomingCall called without a callObject...using most recent\");\n        callObj = chameleon.calls.incoming[0];\n    }\n    \n    chameleon.log(\"Declining the call.\");\n    callObj.terminator = \"I declined the call\";\n    chameleon.calls.incoming.splice(chameleon.calls.incoming.indexOf(callObj), 1);\n    callObj.decline(603);\n\n};\n\n/**==========================================\n *  When chameleon has an outgoing call, this\n *  cancels the call.\n   ========================================== */\n \nchameleon.cancelOutgoingCall = function(callObj){\n    \n    chameleon.log(\"cancelling an outgoing call.\");\n    \n    if (callObj) {\n        chameleon.log(\"rejectIncomingCall called with a callObject: \" + callObj);\n    } else {\n        chameleon.log(\"rejectIncomingCall called without a callObject...using most recent\");\n        callObj = chameleon.calls.outgoing[0];\n    }\n    \n    chameleon.log(\"Cancelling the call.\");\n    callObj.terminator = \"I cancelled the call\";\n    chameleon.calls.outgoing.splice(chameleon.calls.outgoing.indexOf(callObj), 1);\n    callObj.end();\n\n};\n\n\n/**==========================================\n *  When chameleon has an active call, this\n *  hangs up the call.\n   ========================================== */\n\nchameleon.endActiveCall = function(callObj){\n    \n    chameleon.log(\"hanging up the call\");\n    \n    if (callObj) {\n        chameleon.log(\"endActiveCall called with a callObject: \" + callObj);\n\n    } else {\n        chameleon.log(\"endActiveCall called without a callObject...using most recent\");\n        callObj = chameleon.calls.active[0];\n    }\n    \n    chameleon.log(\"Hanging up the call.\");\n    callObj.terminator = \"I hung up\";\n    callObj.end();\n\n};\n\n/**==========================================\n *  This sets up a new call.\n   ========================================== */\n   \nchameleon.makeCall = function(callee, options, localMediaStream){\n    if(!callee) return chameleon.log(\"Need to specify a callee to make a call\");\n    if(chameleon.signallingStateId != 4) return chameleon.log(\"Not connected to WSC...can't make a call\");\n    var callConfig;\n    var audioMediaDirection;\n    var videoMediaDirection;\n    var dcConfig = null;\n    \n    if(!options){\n        audioMediaDirection = wsc.MEDIADIRECTION.SENDRECV;\n        videoMediaDirection = wsc.MEDIADIRECTION.NONE;\n    }\n    else if ((options.audio === false ||  options.audio == \"NONE\" || !options.audio) && (options.video === false || options.video === \"NONE\" || !options.video) && !options.data) {\n        chameleon.log(\"ERROR: at least one media type must be used\");\n        return\n        \n    } else if (options) {\n        \n// test and set up audio config       \n        if (options.audio === true) {\n            audioMediaDirection = wsc.MEDIADIRECTION.SENDRECV\n        } else if (options.audio === false) {\n            audioMediaDirection = wsc.MEDIADIRECTION.NONE;\n        } else if (options.audio == \"NONE\" || options.audio == \"SENDONLY\" || options.audio == \"RECVONLY\" || options.audio == \"SENDRECV\") { \n            audioMediaDirection = options.audio;\n        } else {\n            chameleon.log(\"ERROR: Invalid Audio Config\");\n            return\n        }\n// test and set up video config        \n        if (options.video === true) {\n            videoMediaDirection = wsc.MEDIADIRECTION.SENDRECV;\n        } else if (options.video === false) {\n            videoMediaDirection = wsc.MEDIADIRECTION.NONE;\n        } else if (options.video == \"NONE\" || options.video == \"SENDONLY\" || options.video == \"RECVONLY\" || options.video == \"SENDRECV\") {\n            videoMediaDirection = options.video;\n        } else {\n            chameleon.log(\"ERROR: Invalid Video Config\");\n            return;\n        }\n\n\n        if (options.dcConfig && options.data === true) {\n// test to make sure dcConfig is an array\n            if (Object.prototype.toString.call(options.dcConfig) !== '[object Array]') {\n                chameleon.log(\"ERROR: Received dcConfig that is not an array\");\n                return;\n            };\n// test to make sure dcConfig has the required properties\n            for (var i = 0; i < options.dcConfig.length; i++) { \n                if (!options.dcConfig[i].label || !options.dcConfig[i].reliable) {\n                    chameleon.log('ERROR: dtConfig at index ' + i + ' does not have required properties. Need \"label\" and \"reliable\".');\n                    return\n                }\n            }\n// all should be well...assign the data channels config\n            dcConfig = options.dcConfig;\n        }\n    }\n    \n// create the WSC callConfig\n    if (dcConfig !== null && options.data === true) callConfig = new wsc.CallConfig(audioMediaDirection, videoMediaDirection, dcConfig);\n    else callConfig = new wsc.CallConfig(audioMediaDirection, videoMediaDirection);\n    \n    chameleon.log(\"Making a call to \" + callee);\n    var newCallObj = chameleon.wscCallPackage.createCall(callee, callConfig, doCallError);\n    \n    newCallObj.direction = \"Outgoing\";\n    newCallObj.dataChannels = [];\n    \n    chameleon.handlers.setupCallEvents(newCallObj);\n    \n    \n    chameleon.calls.outgoing.push(newCallObj);\n    chameleon.calls.all.push(newCallObj);\n    \n    if (localMediaStream) {\n        chameleon.log(\"Making call with provided localMediaStream\");\n        newCallObj.start([localMediaStream]);\n    } else {\n        newCallObj.start();\n    }\n    \n    chameleon.isOutgoingCall = true;\n    \n    function doCallError(error){\n        chameleon.log(\"WSC Error...sending to Call Error handler.\");\n        var callObj = this;\n        chameleon.handlers.callError(error, callObj);\n    }\n    \n};\n\n\n/**==========================================\n *  \n *  \n * \n * \n * \n *  Event handlers\n * \n * \n * \n * \n * \n   ========================================== */\n   \n/**===============auth Handler============== */\n chameleon.handlers.challengeHandler = function(authType, authHeaders){\n    chameleon.log(\"Auth challenge: \" + authType);\n    chameleon.log(\"Challenge headers: \");\n    chameleon.log(authHeaders);\n    chameleon.log(chameleon.wscSessionObj.sessionState);\n        \n//Set up the response object by calling a function.\n    var authInfo = null;\n    chameleon.updateAngular();\n    \n    if(authType==wsc.AUTHTYPE.SERVICE){\n        authInfo = getSipAuth(authHeaders);\n    } else if(authType==wsc.AUTHTYPE.TURN){\n        chameleon.log(\"TURN Auth Handler called.\");\n        \n       var config = {\n   \"iceServers\":[\n      {\n         \"url\":\"stun:155.212.214.154:3478\"\n      },\n      {\n         \"url\":\"turn:155.212.214.154:3478\",\n         \"credential\":\"sips\",\n         \"username\":\"admin\"\n      }\n   ]\n}\n        authInfo = config;\n        \n        return authInfo;\n    }\n    \n    chameleon.log(\"Returning authInfo: \" + JSON.stringify(authInfo));\n    return authInfo;\n    \n    function getSipAuth(authHeaders) {\n        chameleon.log(\"getting SIP auth headers\");\n        var authInfo;\n        if (chameleon.configuration.sipPassword != null) {\n            chameleon.log(\"generating local auth response\");\n            authInfo = localAuthGenerator(authHeaders);\n        }\n        return authInfo;\n        \n        // function to create auth response\n        function localAuthGenerator(authHeaders){\n            chameleon.log(\"local auth generation start\");\n            var ha1String = chameleon.configuration.sipUsername + \":\" + authHeaders.realm + \":\" + chameleon.configuration.sipPassword,\n                ha1 = CryptoJS.MD5(ha1String).toString(CryptoJS.enc.Hex);\n            //authHeaders.username = chameleon.sipUsername;\n            authHeaders.ha1 = ha1;\n            //authHeaders.opaque = '\"auth\"';\n            return authHeaders;\n        }\n    }\n };\n \n/**===============set up call event handlers============== */\nchameleon.handlers.setupCallEvents = function(callObj){\n// set up event handlers for the provided callObj\n    chameleon.log(\"setting call event Handlers\");\n    \n    \n// set the ice check timer\n\n    \n    chameleon.log(\"Current ICE Timer is: \" + callObj.getIceCheckInterval());\n    \n    if (typeof chameleon.configuration.iceTimer === \"number\") {\n        callObj.setIceCheckInterval(chameleon.configuration.iceTimer);\n        chameleon.log(\"Now ICE Timer is: \"  + callObj.getIceCheckInterval());\n    };\n    \n    \n// onCallStateChange event\n    callObj.onCallStateChange = function(newState){\n        chameleon.handlers.callStateChange(callObj, newState);\n    };\n\n// onMediaStreamEvent event\n    callObj.onMediaStreamEvent = chameleon.handlers.mediaStreamEventHandler;\n    \n// onDataTransfer event\n    callObj.onDataTransfer = function(dataTransfer) {\n        chameleon.handlers.dataEventHandler(callObj, dataTransfer);\n    };\n    \n// onMessage\n\n// onUpdate\n\n// onUpdate\n\n    callObj.onUpdate = function(newCallConfig){\n        chameleon.log (\"got a call update request...new callConfig is: \");\n        chameleon.log(newCallConfig);\n        chameleon.log(\"everything looks good as far as I can tell...better accept the update!\");\n        callObj.accept(newCallConfig);\n        // callObj.decline(488);\n    };\n};\n\n\n/**===============Incoming call Handler============== */\nchameleon.handlers.incomingCall = function(callObj, callConfig){\n    chameleon.log(\"Incoming call handler invoked\");\n    callObj.direction = \"Incoming\";\n    callObj.dataChannels = [];\n    chameleon.calls.all.push(callObj);\n    chameleon.calls.incoming.push(callObj);\n    chameleon.isIncomingCall = true;\n    chameleon.updateAngular();\n};\n\nchameleon.handlers.callError = function(err, callObj){\n    chameleon.log(\"Error...something went wrong with the call: \" + err.reason.name);\n    chameleon.log(JSON.stringify(err));\n\n    var callState = callObj.getCallState();\n    \n    chameleon.log(\"Call state is:  \" + JSON.stringify(callState));\n    \n    if (callState.state == \"NONE\" || callState.state == \"FAILED\" || callState.state == \"ERROR\" || callState.state == \"ENDED\") {\n        chameleon.log(\"call is \" + callState.state + \". Doing nothing.\");\n    } else if (callState.state == \"RESPONDED\" || callState.state == \"ESTABLISHED\" || callState.state == \"UPDATED\") {\n        chameleon.log(\"call is \" + callState.state + \". Ending call.\");\n        callObj.end();\n    } else if (callState.state == \"UPDATING\") {\n        chameleon.log(\"call is \" + callState.state + \". Rejecting Update.\");\n        callObj.decline(488);\n    } else if (callState.state == \"UPDATE_FAILED\") {\n        chameleon.log(\"call is \" + callState.state + \". Resume session at previous state.\");\n    } else {\n        chameleon.log(\"call is \" + callState.state + \". This state is unhandled, so doing nothing.\");\n    }\n};\n\n\n/**===============callStateChangeHandler============== */\nchameleon.handlers.callStateChange = function(callObj, newCallState){\n    chameleon.log(\"CALL STATE CHANGE. \" + JSON.stringify(newCallState));\n    if (newCallState.state == wsc.CALLSTATE.STARTED) {\n        \n    // Create a object property to indicate media state\n        callObj.mediaPath = \"NONE\"\n\n    }\n    \n    if (newCallState.state == wsc.CALLSTATE.ESTABLISHED) {\n        chameleon.log(\"Call is established.\");\n        callObj.startTime = new Date();\n        // Remove call from attempted array, and push to active array\n        \n        if (callObj.direction == 'Outgoing') {\n            chameleon.calls.active.push(callObj);\n            chameleon.calls.outgoing.splice(chameleon.calls.outgoing.indexOf(callObj), 1);\n        }\n        \n    // Wire up handler for once call is started, to grab the peerConnection associated with the call\n        var pc = callObj.getPeerConnection();\n        chameleon.log(\"Call started, getting peerConnection\");\n        chameleon.log(pc);\n        \n    // Set call object media path state per current iceConnectionState\n        switch(pc.iceConnectionState) {\n            case \"new\" :\n                callObj.mediaPath = \"NEW\";\n                break;\n            case \"checking\" :\n                callObj.mediaPath = \"CHECKING\";\n                break;\n            case \"connected\" :\n                callObj.mediaPath = \"OPEN\";\n                break;\n            case \"completed\" :\n                callObj.mediaPath = \"OPEN\";\n                break;\n            case \"disconnected\" :\n                callObj.mediaPath = \"CLOSED\";\n                break;\n            case \"failed\" :\n                callObj.mediaPath = \"FAILED\";\n                break;\n            case \"closed\" :\n                callObj.mediaPath = \"CLOSED\";\n                break;\n            default :\n                callObj.mediaPath = \"UNKNOWN\";\n                break;\n        }\n        \n    // Set up handler for ICE state changes\n        pc.oniceconnectionstatechange = function(event) {\n            chameleon.log(\"Ice state change! New state is: \" + event.target.iceConnectionState);\n            chameleon.log(event);\n            switch(event.target.iceConnectionState) {\n                case \"new\" :\n                    callObj.mediaPath = \"NEW\";\n                    break;\n                case \"checking\" :\n                    callObj.mediaPath = \"CHECKING\";\n                    break;\n                case \"connected\" :\n                    callObj.mediaPath = \"OPEN\";\n                    break;\n                case \"completed\" :\n                    callObj.mediaPath = \"OPEN\";\n                    break;\n                case \"disconnected\" :\n                    callObj.mediaPath = \"CLOSED\";\n                    break;\n                case \"failed\" :\n                    callObj.mediaPath = \"FAILED\";\n                    break;\n                case \"closed\" :\n                    callObj.mediaPath = \"CLOSED\";\n                    break;\n                default :\n                    callObj.mediaPath = \"UNKNOWN\";\n                    break;\n            };\n            chameleon.updateAngular();\n        }\n        \n        \n    } else if (newCallState.state == wsc.CALLSTATE.ENDED) {\n\n        callObj.endTime = new Date();\n        if (!callObj.startTime) callObj.startTime = callObj.endTime;\n        chameleon.log(\"Setting call duration\");\n        var millisecondDuration = callObj.endTime.getTime() - callObj.startTime.getTime();\n        callObj.duration = millisecondDuration;\n        \n        if (!callObj.terminator) {\n            chameleon.log(\"Fer end hung up\");\n            callObj.terminator = \"Far end hung up\";\n        };\n        \n        chameleon.log(\"Removing object from active calls: \");\n        chameleon.log(callObj);\n        chameleon.calls.active.splice(chameleon.calls.active.indexOf(callObj), 1);\n        chameleon.calls.incoming.splice(chameleon.calls.incoming.indexOf(callObj), 1);\n        chameleon.calls.outgoing.splice(chameleon.calls.outgoing.indexOf(callObj), 1);\n\n    } else if (newCallState.state == wsc.CALLSTATE.FAILED) {\n        \n        chameleon.log(\"Call Failure.\");\n        var err = callObj.getCallState();\n        callObj.endTime = new Date();\n        if (!callObj.startTime) callObj.startTime = callObj.endTime;\n        millisecondDuration = callObj.endTime.getTime() - callObj.startTime.getTime();\n        callObj.duration = millisecondDuration;\n        callObj.terminator = err.status.code + \" \" + err.status.reason;\n        chameleon.calls.active.splice(chameleon.calls.active.indexOf(callObj), 1);\n        chameleon.calls.incoming.splice(chameleon.calls.incoming.indexOf(callObj), 1);\n        chameleon.calls.outgoing.splice(chameleon.calls.outgoing.indexOf(callObj), 1);\n    }\n    \n// Reset state boolean values, if needed\n    chameleon.log(\"testing call states for cleanup\");\n    if (chameleon.calls.incoming.length === 0 && chameleon.isIncomingCall === true) {\n        chameleon.log(\"Incoming call array is: \" + chameleon.calls.incoming.length + \" and isIncomingCall is \" + chameleon.isIncomingCall + \". Setting isIncomingCall to false\");\n        chameleon.isIncomingCall = false;\n    }\n    if (chameleon.calls.outgoing.length === 0 && chameleon.isOutgoingCall === true) {\n        chameleon.log(\"Outgoing call array is: \" + chameleon.calls.outgoing.length + \". Setting isOutgoingCall to false\");\n        chameleon.isOutgoingCall = false;\n    }\n    if (chameleon.calls.active.length === 0 && chameleon.isActiveCall === true) {\n        chameleon.log(\"Active call array is: \" + chameleon.calls.active.length + \". Setting isActiveCall to false\");\n        chameleon.isActiveCall = false;\n    }\n    \n    chameleon.updateAngular();\n    \n};\n\n/**===============sessionStateChangeHandler============ */\nchameleon.handlers.sessionStateChange = function(newSessionState){\n    chameleon.log(\"SESSION STATE CHANGE.\");\n    switch (newSessionState) {\n        case \"CLOSED\" :\n            chameleon.signallingStateId = 2;\n            break;\n        default:\n            chameleon.log(\"no change needed\");\n    }\n    chameleon.updateAngular();\n};\n\n\n/**===============mediaEventHandler============== */\nchameleon.handlers.mediaStreamEventHandler = function(mediaState, stream){\n    chameleon.log(\"GOT MEDIA EVENT.\");\n    chameleon.log(mediaState);\n    \n    if (mediaState == wsc.MEDIASTREAMEVENT.LOCAL_STREAM_ADDED) {\n        chameleon.log(\"Local Stream Added. Attaching to \" + chameleon.configuration.localAudioId);\n        //attachMediaStream(document.getElementById(chameleon.configuration.localAudioId), stream);\n        attachMediaStream(document.getElementById(chameleon.configuration.localVideoId), stream);\n   } else if (mediaState == wsc.MEDIASTREAMEVENT.REMOTE_STREAM_ADDED) {\n        chameleon.log(\"Remote Stream Added. Attaching to \" + chameleon.configuration.remoteAudioId);\n        //attachMediaStream(document.getElementById(chameleon.configuration.remoteAudioId), stream);\n        attachMediaStream(document.getElementById(chameleon.configuration.remoteVideoId), stream);\n   }\n};\n\n/**===============dataEventHandler============== */\nchameleon.handlers.dataEventHandler = function(callObj, dataTransfer) {\n    chameleon.log(\"GOT DATA TRANSFER EVENT\");\n    chameleon.log(dataTransfer);\n    \n// set up the callObj DC callback\n    callObj.dcIncomingCallback = function(event){\n        if (chameleon.callbacks.onIncomingData) {\n            chameleon.callbacks.onIncomingData(event);\n        } else chameleon.log(\"Data callback not set...doing nothing.\");\n    }\n\n// assign the dataTransfer handlers\n    dataTransfer.onOpen = onDCOpen;\n    dataTransfer.onError = onDCError;\n    dataTransfer.onClose = onDCClose;\n    \n// add dataTransfer to array of dataTransfer objects\n    callObj.dataChannels.push(dataTransfer);\n    \n// define dataTransfer handlers\n\n    function onDCOpen() {\n        chameleon.log(\"Data Channel is Open\");\n// set up data receiver and sender objects\n        var receiver = dataTransfer.getReceiver();\n        var sender = dataTransfer.getSender();\n        \n        if (receiver) {\n            receiver.onMessage = function (event) {\n                event.callIndex = chameleon.calls.all.indexOf(callObj);\n                event.activeCallIndex = chameleon.calls.active.indexOf(callObj);\n                chameleon.log(\"Received incoming data from call number \" + event.callIndex + \", active call number \" + event.activeCallIndex + \"...calling callBack\");\n                callObj.dcIncomingCallback(event);\n                chameleon.updateAngular();\n            }\n        }\n        \n        dataTransfer.sendData = function(data) {\n            chameleon.log(\"Got data to send: \" + data);\n            if (sender) {\n                sender.send(data);\n                \n            } else {\n               console.log(\"sender is null\");\n            }\n        }\n            \n        chameleon.updateAngular();\n    }\n    \n    function onDCError() {\n        chameleon.log(\"Data Channel got an error\");\n        chameleon.updateAngular();\n    }\n    \n    function onDCClose() {\n        chameleon.log(\"Data Channel is Closed\");\n        chameleon.updateAngular();\n        \n    }\n}\n\n/**===============messageEventHandler============== */\n\n\n/**===============updateEventHandler============== */\n\n\n/**==========================================\n *  Function for attaching \n *  media streams, based on browser type\n   ========================================== */\n   \nvar attachMediaStream = {};\n\nif (navigator.mozGetUserMedia) {\n    chameleon.log(\"Attaching media stream\");\n    // Attach a media stream to an element.\n    attachMediaStream = function(element, stream) {\n        chameleon.log(\"Application using Mozilla browser\");\n        chameleon.log(stream);\n        chameleon.log(stream.getVideoTracks());\n        chameleon.log(stream.getAudioTracks());\n        element.mozSrcObject = stream;\n        element.play();\n    };\n} else if (navigator.webkitGetUserMedia) {\n    chameleon.log(\"Application using Chrome browser\");\n    // Attach a media stream to an element.\n    attachMediaStream = function(element, stream) {\n        chameleon.log(stream);\n        chameleon.log(stream.getVideoTracks());\n        chameleon.log(stream.getAudioTracks());\n        element.src = webkitURL.createObjectURL(stream);\n    };\n} else {\n    // The browser does not support media streams\n    chameleon.log(\"Browser does not support media streams\");\n}\n\n\n\n// A little clean-up\nwindow.onunload = function(){\n    chameleon.closeSession();\n};\n\n\n\n\n\n   \n\n","undoManager":{"mark":98,"position":100,"stack":[[{"group":"doc","deltas":[{"start":{"row":769,"column":9},"end":{"row":769,"column":10},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":769,"column":10},"end":{"row":769,"column":11},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":769,"column":11},"end":{"row":769,"column":12},"action":"insert","lines":["{"]}]}],[{"group":"doc","deltas":[{"start":{"row":769,"column":12},"end":{"row":771,"column":5},"action":"insert","lines":["","        ","    }"]}]}],[{"group":"doc","deltas":[{"start":{"row":762,"column":8},"end":{"row":762,"column":73},"action":"insert","lines":["chameleon.log(\"call is \" + callState.state + \". Doing nothing.\");"]}]}],[{"group":"doc","deltas":[{"start":{"row":764,"column":8},"end":{"row":765,"column":26},"action":"insert","lines":["chameleon.log(\"call is \" + callState.state + \". Ending call.\");","            callObj.end();"]}]}],[{"group":"doc","deltas":[{"start":{"row":765,"column":8},"end":{"row":765,"column":12},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":767,"column":8},"end":{"row":768,"column":33},"action":"insert","lines":["chameleon.log(\"call is \" + callState.state + \". Rejecting Update.\");","            callObj.decline(488);"]}]}],[{"group":"doc","deltas":[{"start":{"row":768,"column":8},"end":{"row":768,"column":12},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":770,"column":8},"end":{"row":770,"column":92},"action":"insert","lines":["chameleon.log(\"call is \" + callState.state + \". Resume session at previous state.\");"]}]}],[{"group":"doc","deltas":[{"start":{"row":772,"column":8},"end":{"row":772,"column":101},"action":"insert","lines":["chameleon.log(\"call is \" + callState.state + \". This state is unhandled, so doing nothing.\");"]}]}],[{"group":"doc","deltas":[{"start":{"row":774,"column":0},"end":{"row":793,"column":5},"action":"remove","lines":["    ","    switch (callState.state) {","        case (\"NONE\" || \"FAILED\" || \"ERROR\" || \"ENDED\") :","            chameleon.log(\"call is \" + callState.state + \". Doing nothing.\");","            break;","        case (\"RESPONDED\" || \"ESTABLISHED\" || \"UPDATED\") :","            chameleon.log(\"call is \" + callState.state + \". Ending call.\");","            callObj.end();","            break;","        case \"UPDATING\" :","            chameleon.log(\"call is \" + callState.state + \". Rejecting Update.\");","            callObj.decline(488);","            break;","        case \"UPDATE_FAILED\" :","            chameleon.log(\"call is \" + callState.state + \". Resume session at previous state.\");","            break;","        default :","            chameleon.log(\"call is \" + callState.state + \". This state is unhandled, so doing nothing.\");","            break;","    }"]}]}],[{"group":"doc","deltas":[{"start":{"row":773,"column":5},"end":{"row":774,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":351,"column":84},"end":{"row":352,"column":0},"action":"insert","lines":["",""]},{"start":{"row":352,"column":0},"end":{"row":352,"column":12},"action":"insert","lines":["            "]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":12},"end":{"row":352,"column":13},"action":"insert","lines":["c"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":13},"end":{"row":352,"column":14},"action":"insert","lines":["h"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":14},"end":{"row":352,"column":15},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":15},"end":{"row":352,"column":16},"action":"insert","lines":["m"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":16},"end":{"row":352,"column":17},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":17},"end":{"row":352,"column":18},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":18},"end":{"row":352,"column":19},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":19},"end":{"row":352,"column":20},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":20},"end":{"row":352,"column":21},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":21},"end":{"row":352,"column":22},"action":"insert","lines":["."]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":22},"end":{"row":352,"column":23},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":23},"end":{"row":352,"column":24},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":22},"end":{"row":352,"column":24},"action":"remove","lines":["lo"]},{"start":{"row":352,"column":22},"end":{"row":352,"column":27},"action":"insert","lines":["log()"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":26},"end":{"row":352,"column":28},"action":"insert","lines":["\"\""]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":27},"end":{"row":352,"column":28},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":28},"end":{"row":352,"column":29},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":29},"end":{"row":352,"column":30},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":30},"end":{"row":352,"column":31},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":31},"end":{"row":352,"column":32},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":32},"end":{"row":352,"column":33},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":33},"end":{"row":352,"column":34},"action":"insert","lines":["g"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":34},"end":{"row":352,"column":35},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":35},"end":{"row":352,"column":36},"action":"insert","lines":["I"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":36},"end":{"row":352,"column":37},"action":"insert","lines":["C"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":37},"end":{"row":352,"column":38},"action":"insert","lines":["E"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":38},"end":{"row":352,"column":39},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":39},"end":{"row":352,"column":40},"action":"insert","lines":["m"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":40},"end":{"row":352,"column":41},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":41},"end":{"row":352,"column":42},"action":"insert","lines":["d"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":42},"end":{"row":352,"column":43},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":43},"end":{"row":352,"column":44},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":44},"end":{"row":352,"column":45},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":45},"end":{"row":352,"column":46},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":46},"end":{"row":352,"column":47},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":47},"end":{"row":352,"column":48},"action":"insert","lines":["c"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":48},"end":{"row":352,"column":49},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":49},"end":{"row":352,"column":50},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":50},"end":{"row":352,"column":51},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":51},"end":{"row":352,"column":52},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":52},"end":{"row":352,"column":53},"action":"insert","lines":["p"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":53},"end":{"row":352,"column":54},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":54},"end":{"row":352,"column":55},"action":"insert","lines":["c"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":55},"end":{"row":352,"column":56},"action":"insert","lines":["k"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":56},"end":{"row":352,"column":57},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":57},"end":{"row":352,"column":58},"action":"insert","lines":["g"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":58},"end":{"row":352,"column":59},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":61},"end":{"row":352,"column":62},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":62},"end":{"row":353,"column":0},"action":"insert","lines":["",""]},{"start":{"row":353,"column":0},"end":{"row":353,"column":12},"action":"insert","lines":["            "]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":12},"end":{"row":353,"column":13},"action":"insert","lines":["c"]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":13},"end":{"row":353,"column":14},"action":"insert","lines":["h"]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":14},"end":{"row":353,"column":15},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":12},"end":{"row":353,"column":15},"action":"remove","lines":["cha"]},{"start":{"row":353,"column":12},"end":{"row":353,"column":21},"action":"insert","lines":["chameleon"]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":21},"end":{"row":353,"column":22},"action":"insert","lines":["."]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":22},"end":{"row":353,"column":23},"action":"insert","lines":["w"]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":23},"end":{"row":353,"column":24},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":22},"end":{"row":353,"column":24},"action":"remove","lines":["ws"]},{"start":{"row":353,"column":22},"end":{"row":353,"column":36},"action":"insert","lines":["wscCallPackage"]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":36},"end":{"row":353,"column":37},"action":"insert","lines":["."]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":37},"end":{"row":353,"column":38},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":38},"end":{"row":353,"column":39},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":39},"end":{"row":353,"column":40},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":40},"end":{"row":353,"column":41},"action":"insert","lines":["T"]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":41},"end":{"row":353,"column":42},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":42},"end":{"row":353,"column":43},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":43},"end":{"row":353,"column":44},"action":"insert","lines":["c"]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":44},"end":{"row":353,"column":45},"action":"insert","lines":["k"]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":45},"end":{"row":353,"column":46},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":46},"end":{"row":353,"column":47},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":47},"end":{"row":353,"column":48},"action":"insert","lines":["I"]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":48},"end":{"row":353,"column":49},"action":"insert","lines":["c"]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":49},"end":{"row":353,"column":50},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":50},"end":{"row":353,"column":51},"action":"insert","lines":["M"]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":51},"end":{"row":353,"column":52},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":52},"end":{"row":353,"column":53},"action":"insert","lines":["d"]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":53},"end":{"row":353,"column":54},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":54},"end":{"row":353,"column":56},"action":"insert","lines":["()"]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":55},"end":{"row":353,"column":56},"action":"insert","lines":["f"]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":56},"end":{"row":353,"column":57},"action":"insert","lines":["u"]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":56},"end":{"row":353,"column":57},"action":"remove","lines":["u"]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":55},"end":{"row":353,"column":56},"action":"remove","lines":["f"]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":55},"end":{"row":353,"column":57},"action":"insert","lines":["\"\""]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":56},"end":{"row":353,"column":57},"action":"insert","lines":["f"]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":57},"end":{"row":353,"column":58},"action":"insert","lines":["u"]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":58},"end":{"row":353,"column":59},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":59},"end":{"row":353,"column":60},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":353,"column":62},"end":{"row":353,"column":63},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":12},"end":{"row":353,"column":63},"action":"remove","lines":["chameleon.log(\"setting ICE mode in call package\");","            chameleon.wscCallPackage.setTrickleIceMode(\"full\");"]}]}],[{"group":"doc","deltas":[{"start":{"row":352,"column":12},"end":{"row":353,"column":63},"action":"insert","lines":["chameleon.log(\"setting ICE mode in call package\");","            chameleon.wscCallPackage.setTrickleIceMode(\"full\");"]}]}]]},"ace":{"folds":[],"scrolltop":7633.5,"scrollleft":0,"selection":{"start":{"row":676,"column":13},"end":{"row":676,"column":13},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":646,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1419464142000}